#include <stdio.h>
#include <stdlib.h>

typedef struct node {
    int data;
    struct node* next;
} Node;

typedef struct queue {
    Node* front;
    Node* rear;
} Queue;

void enqueue(Queue* queue, int data) {
    Node* newNode = (Node*) malloc(sizeof(Node));
    newNode->data = data;
    newNode->next = NULL;

    if (queue->front == NULL) {
        queue->front = newNode;
        queue->rear = newNode;
        return;
    }

    queue->rear->next = newNode;
    queue->rear = newNode;
}

int dequeue(Queue* queue) {
    if (queue->front == NULL) {
        printf("Queue is empty\n");
        exit(1);
    }

    Node* temp = queue->front;
    int data = temp->data;

    if (queue->front == queue->rear) {
        queue->front = NULL;
        queue->rear = NULL;
    } else {
        queue->front = queue->front->next;
    }

    free(temp);
    return data;
}

void push(Queue* queue, int data) {
    int n = queue->rear - queue->front + 1;
    enqueue(queue, data);

    for (int i = 0; i < n; i++) {
        int data = dequeue(queue);
        enqueue(queue, data);
    }
}

int pop(Queue* queue) {
    if (queue->front == NULL) {
        printf("Stack is empty\n");
        exit(1);
    }

    return dequeue(queue);
}

void display(Queue* queue) {
    if (queue->front == NULL) {
        printf("Stack is empty\n");
        return;
    }

    Node* temp = queue->front;

    while (temp != NULL) {
        printf("%d ", temp->data);
        temp = temp->next;
    }

    printf("\n");
}

int main() {
    Queue queue = { NULL, NULL };

    push(&queue, 10);
    push(&queue, 20);
    push(&queue, 30);

    display(&queue);

    printf("Popped: %d\n", pop(&queue));
    printf("Popped: %d\n", pop(&queue));

    display(&queue);

    return 0;
}

